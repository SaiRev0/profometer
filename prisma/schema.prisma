generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id            String       @id @default(cuid())
    name          String?
    email         String?      @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    reviews       Review[]
    reviewVotes   ReviewVote[]
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
}

model Department {
    id            String      @id @default(cuid())
    name          String      @unique
    code          String      @unique
    avgRating     Float
    numProfessors Int
    numReviews    Int
    professors    Professor[]
    courses       Course[]
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
}

model Professor {
    id           String     @id @default(cuid())
    name         String
    departmentId String
    department   Department @relation(fields: [departmentId], references: [id])
    designation  String
    photoUrl     String?
    email        String?
    website      String?
    reviews      Review[]
    // Statistics stored as JSON
    statistics   Json       @default("{\"ratings\":{\"overall\":0,\"teaching\":0,\"helpfulness\":0,\"fairness\":0,\"clarity\":0,\"communication\":0},\"percentages\":{\"wouldRecommend\":0,\"attendanceRating\":0,\"quizes\":0,\"assignments\":0},\"totalReviews\":0}")
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model Course {
    id           String     @id @default(cuid())
    code         String     @unique
    name         String
    description  String
    credits      Int
    departmentId String
    department   Department @relation(fields: [departmentId], references: [id])
    reviews      Review[]
    statistics   Json       @default("{\"ratings\":{\"overall\":0},\"percentages\":{\"wouldRecommend\":0, \"averageGrade\": \"NA\"},\"totalReviews\":0}")
    verified     Boolean    @default(false)
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model Review {
    id             String    @id @default(cuid())
    professorId    String
    professor      Professor @relation(fields: [professorId], references: [id])
    courseId       String
    course         Course    @relation(fields: [courseId], references: [id])
    userId         String
    user           User      @relation(fields: [userId], references: [id])
    semester       String
    anonymous      Boolean   @default(false)
    ratings        Json // Stores all ratings as a JSON object
    comment        String    @db.Text
    wouldRecommend Boolean
    attendance     String // 'percentage'
    quizes         Boolean
    assignments    Boolean
    grade          String?
    upvotes        Int       @default(0)
    downvotes      Int       @default(0)
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
}

model ReviewVote {
    id        String   @id @default(cuid())
    reviewId  String
    userId    String
    voteType  String // 'up' or 'down'
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User     @relation(fields: [userId], references: [id])

    @@unique([reviewId, userId])
}
