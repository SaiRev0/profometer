generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum ReviewType {
    professor
    course
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model User {
    id             String         @id @default(cuid())
    name           String?
    email          String         @unique
    emailVerified  DateTime?
    image          String?
    accounts       Account[]
    sessions       Session[]
    departmentCode String?
    department     Department?    @relation(fields: [departmentCode], references: [code])
    reviews        Review[]
    reviewVotes    ReviewVote[]
    reviewReports  ReviewReport[]
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
}

model Department {
    code             String      @id
    name             String      @unique
    totalWeightedSum Float       @default(0) // Sum of (rating * weight) for all reviews
    totalWeight      Float       @default(0) // Sum of weights for all reviews
    avgRating        Float       @default(0) // This will be calculated as totalWeightedSum/totalWeight
    numReviews       Int
    professors       Professor[]
    courses          Course[]
    users            User[]
    createdAt        DateTime    @default(now())
    updatedAt        DateTime    @updatedAt

    @@index([name])
    @@index([avgRating(sort: Desc)])
}

model Professor {
    id             String     @id @default(cuid())
    name           String
    departmentCode String
    department     Department @relation(fields: [departmentCode], references: [code])
    designation    String
    photoUrl       String?
    email          String?
    website        String?
    reviews        Review[]
    totalCourses   Int        @default(0)
    statistics     Json       @default("{\"ratings\":{\"overall\":0,\"teaching\":0,\"helpfulness\":0,\"fairness\":0,\"clarity\":0,\"communication\":0},\"percentages\":{\"wouldRecommend\":0,\"attendanceRating\":0,\"quizes\":0,\"assignments\":0},\"totalReviews\":0}")
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt

    @@index([name])
    @@index([departmentCode])
    @@index([departmentCode, createdAt(sort: Desc)])
}

model Course {
    code            String     @id
    name            String
    description     String
    credits         Int
    departmentCode  String
    department      Department @relation(fields: [departmentCode], references: [code])
    reviews         Review[]
    totalProfessors Int        @default(0)
    statistics      Json       @default("{\"ratings\":{\"overall\":0, \"scoring\":0, \"engaging\":0, \"conceptual\":0, \"easyToLearn\":0},\"percentages\":{\"wouldRecommend\":0, \"attendanceRating\":0, \"quizes\":0, \"assignments\":0, \"averageGrade\": \"NA\"},\"totalReviews\":0}")
    verified        Boolean    @default(false)
    createdAt       DateTime   @default(now())
    updatedAt       DateTime   @updatedAt

    @@index([name])
    @@index([code])
    @@index([verified])
    @@index([departmentCode])
    @@index([departmentCode, createdAt(sort: Desc)])
    @@index([verified, createdAt(sort: Desc)])
}

model Review {
    id          String         @id @default(cuid())
    professorId String
    professor   Professor      @relation(fields: [professorId], references: [id])
    courseCode  String
    course      Course         @relation(fields: [courseCode], references: [code])
    userId      String?
    user        User?          @relation(fields: [userId], references: [id])
    semester    String
    anonymous   Boolean        @default(false)
    ratings     Json // Stores all ratings as a JSON object
    comment     String         @db.Text
    statistics  Json // Stores all statistics as a JSON object
    grade       String?
    type        ReviewType // 'course' or 'professor'
    upvotes     Int            @default(0)
    downvotes   Int            @default(0)
    reports     ReviewReport[]
    votes       ReviewVote[]
    createdAt   DateTime       @default(now())
    updatedAt   DateTime       @updatedAt

    @@index([userId])
    @@index([professorId, type, createdAt(sort: Desc)])
    @@index([courseCode, type, createdAt(sort: Desc)])
    @@index([type, createdAt(sort: Desc)])
    @@index([createdAt(sort: Desc)])
    @@index([professorId, courseCode])
    @@index([userId, createdAt(sort: Desc)])
}

model ReviewVote {
    id        String   @id @default(cuid())
    reviewId  String
    review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    userId    String
    voteType  String // 'up' or 'down'
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    User      User     @relation(fields: [userId], references: [id])

    @@unique([reviewId, userId])
    @@index([userId])
}

model ReviewReport {
    id         String   @id @default(cuid())
    reviewId   String
    review     Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
    reason     String
    details    String?  @db.Text
    reportedBy String
    reporter   User     @relation(fields: [reportedBy], references: [id])
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@index([reviewId])
    @@index([reportedBy])
    @@index([createdAt(sort: Desc)])
}
